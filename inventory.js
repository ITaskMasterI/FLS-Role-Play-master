const fs = require("fs");
const path = require("path");
const { PermissionsBitField } = require("discord.js");

const INVENTORY_PATH = "./files/inventory";
const SETTINGS_FILE = path.join(INVENTORY_PATH, "settings.json");

if (!fs.existsSync(INVENTORY_PATH)) {
  fs.mkdirSync(INVENTORY_PATH, { recursive: true });
}

let inventorySettings = {};
if (fs.existsSync(SETTINGS_FILE)) {
  try {
    inventorySettings = JSON.parse(fs.readFileSync(SETTINGS_FILE, "utf8"));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", err);
  }
}

function saveSettings() {
  try {
    fs.writeFileSync(SETTINGS_FILE, JSON.stringify(inventorySettings, null, 2));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", err);
  }
}

function loadData(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, "utf8");
      return JSON.parse(data);
    }
    return {};
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${filePath}:`, err);
    return {};
  }
}

function saveData(filePath, data) {
  try {
    if (Object.keys(data).length === 0) {
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }
    } else {
      fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ ${filePath}:`, err);
  }
}

function isInventoryEnabled(channelId) {
  return inventorySettings[channelId] === true;
}

function isGM(channelId, userId) {
  const gmFile = path.join(INVENTORY_PATH, `${channelId}_gm.json`);
  const gmData = loadData(gmFile);
  return gmData[userId] === true;
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function setInventorySystem(msg) {
  try {
    if (!msg.member) {
      return msg.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
    }

    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    const isAdmin = msg.member.permissions.has(PermissionsBitField.Flags.Administrator);
    const isModerator = msg.channel.permissionsFor(msg.member).has(PermissionsBitField.Flags.ManageChannels);

    if (!isAdmin && !isModerator) {
      return msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.");
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    inventorySettings[channelId] = !inventorySettings[channelId];
    saveSettings();
    return msg.reply(
      inventorySettings[channelId]
        ? "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤–∫–ª—é—á–µ–Ω–∞."
        : "‚ùå –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç–∫–ª—é—á–µ–Ω–∞."
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ setInventorySystem:", err);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è)
function showInventory(msg) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    const inventoryFile = path.join(INVENTORY_PATH, `${channelId}_${msg.author.id}.json`);
    const inventory = loadData(inventoryFile);

    if (Object.keys(inventory).length === 0) {
      return msg.reply("üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.");
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const inventoryList = Object.entries(inventory)
      .map(([item, count]) => `- **${item}**: ${count} —à—Ç.`)
      .join("\n");

    return msg.reply(`üì¶ **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n${inventoryList}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ showInventory:", err);
  }
}

// –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–¥–ª—è –∏–≥—Ä–æ–∫–æ–≤)
function giveItem(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if (!msg.mentions.users.size) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ `@`.");
    }

    const targetUser = msg.mentions.users.first(); // –ü–æ–ª—É—á–∞—Ç–µ–ª—å
    const targetId = targetUser.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å–∞–º–æ–º—É —Å–µ–±–µ
    if (targetId === msg.author.id) {
      return msg.reply("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å–∞–º–æ–º—É —Å–µ–±–µ.");
    }

    // –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    const cleanedArgs = args.filter(arg => !arg.startsWith("<@"));
    if (cleanedArgs.length < 2) {
      return msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!inv give @user –ø—Ä–µ–¥–º–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`.");
    }

    // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
    const itemName = cleanedArgs.slice(0, -1).join(" ").trim();

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç)
    const count = parseInt(cleanedArgs[cleanedArgs.length - 1]);
    if (isNaN(count) || count <= 0) {
      return msg.reply("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.");
    }

    if (!itemName) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.");
    }

    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const senderInventoryFile = path.join(INVENTORY_PATH, `${channelId}_${msg.author.id}.json`);
    const senderInventory = loadData(senderInventoryFile);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (!senderInventory[itemName] || senderInventory[itemName] < count) {
      return msg.reply(`‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ **${itemName}**.`);
    }

    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const targetInventoryFile = path.join(INVENTORY_PATH, `${channelId}_${targetId}.json`);
    const targetInventory = loadData(targetInventoryFile);

    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    senderInventory[itemName] -= count;
    if (senderInventory[itemName] <= 0) {
      delete senderInventory[itemName]; // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ 0
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    targetInventory[itemName] = (targetInventory[itemName] || 0) + count;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    saveData(senderInventoryFile, senderInventory);
    saveData(targetInventoryFile, targetInventory);

    return msg.reply(
      `‚úÖ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ **${count}**x **${itemName}** –∏–≥—Ä–æ–∫—É **${targetUser.username}**.`
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ giveItem:", err);
  }
}

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–¥–ª—è –ì–ú–æ–≤)
function addItem(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ì–ú–æ–º
    if (!isGM(channelId, msg.author.id)) {
      return msg.reply("‚õî –¢–æ–ª—å–∫–æ –ì–ú –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.");
    }

    if (!msg.mentions.users.size) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ `@`.");
    }

    const target = msg.mentions.users.first();
    const targetId = target.id;
    const inventoryFile = path.join(INVENTORY_PATH, `${channelId}_${targetId}.json`);
    let inventory = loadData(inventoryFile);

    if (args.length < 2) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
    }

    const count = parseInt(args.pop());
    if (isNaN(count) || count <= 0) {
      return msg.reply("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.");
    }

    // –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    const itemName = args.join(" ").trim().replace(/<@\d+>/g, "").trim();

    if (!itemName) {
      return msg.reply("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    }

    inventory[itemName] = (inventory[itemName] || 0) + count;

    saveData(inventoryFile, inventory);
    return msg.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ **${count}**x **${itemName}** –∏–≥—Ä–æ–∫—É **${target.username}**.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ addItem:", err);
  }
}

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–¥–ª—è –ì–ú–æ–≤)
function removeItem(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ì–ú–æ–º
    if (!isGM(channelId, msg.author.id)) {
      return msg.reply("‚õî –¢–æ–ª—å–∫–æ –ì–ú –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.");
    }

    if (!msg.mentions.users.size) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ `@`.");
    }

    const target = msg.mentions.users.first();
    const targetId = target.id;
    const inventoryFile = path.join(INVENTORY_PATH, `${channelId}_${targetId}.json`);
    let inventory = loadData(inventoryFile);

    if (args.length < 2) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
    }

    const count = parseInt(args.pop());
    if (isNaN(count) || count <= 0) {
      return msg.reply("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.");
    }

    // –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    const itemName = args.join(" ").trim().replace(/<@\d+>/g, "").trim();

    if (!inventory[itemName] || inventory[itemName] < count) {
      return msg.reply("‚ùå –£ –∏–≥—ÄÔøΩÔøΩ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.");
    }

    inventory[itemName] -= count;
    if (inventory[itemName] <= 0) {
      delete inventory[itemName];
    }

    saveData(inventoryFile, inventory);
    return msg.reply(`‚úÖ –£–¥–∞–ª–µ–Ω–æ **${count}**x **${itemName}** —É –∏–≥—Ä–æ–∫–∞ **${target.username}**.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ removeItem:", err);
  }
}

// –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–¥–ª—è –ì–ú–æ–≤)
function deleteItem(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ì–ú–æ–º
    if (!isGM(channelId, msg.author.id)) {
      return msg.reply("‚õî –¢–æ–ª—å–∫–æ –ì–ú –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.");
    }

    if (!msg.mentions.users.size) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ `@`.");
    }

    const target = msg.mentions.users.first();
    const targetId = target.id;
    const inventoryFile = path.join(INVENTORY_PATH, `${channelId}_${targetId}.json`);
    let inventory = loadData(inventoryFile);

    if (args.length < 1) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.");
    }

    // –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    const itemName = args.join(" ").trim().replace(/<@\d+>/g, "").trim();

    if (!inventory[itemName]) {
      return msg.reply("‚ùå –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.");
    }

    delete inventory[itemName];
    saveData(inventoryFile, inventory);
    return msg.reply(`üóëÔ∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –ø—Ä–µ–¥–º–µ—Ç **${itemName}** —É –∏–≥—Ä–æ–∫–∞ **${target.username}**.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ deleteItem:", err);
  }
}

// –ù–∞–∑–Ω–∞—á–∏—Ç—å –ì–ú–∞
function registerGM(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    const isAdmin = msg.member.permissions.has(PermissionsBitField.Flags.Administrator);
    const isModerator = msg.channel.permissionsFor(msg.member).has(PermissionsBitField.Flags.ManageChannels);

    if (!isAdmin && !isModerator) {
      return msg.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ì–ú–∞.");
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ì–ú–æ–º
    const target = msg.mentions.users.first() || msg.author;
    const targetId = target.id;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ì–ú–∞—Ö
    const gmFile = path.join(INVENTORY_PATH, `${channelId}_gm.json`);
    let gmData = loadData(gmFile);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ì–ú –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
    if (Object.keys(gmData).length > 0) {
      const currentGMId = Object.keys(gmData)[0];
      const currentGM = msg.guild.members.cache.get(currentGMId);
      return msg.reply(`‚ùå –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —É–∂–µ –µ—Å—Ç—å –ì–ú: **${currentGM.user.username}**.`);
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –ì–ú–∞
    gmData[targetId] = true;
    saveData(gmFile, gmData);
    return msg.reply(`‚úÖ –ò–≥—Ä–æ–∫ **${target.username}** –Ω–∞–∑–Ω–∞—á–µ–Ω –ì–ú–æ–º.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ registerGM:", err);
  }
}

// –°–Ω—è—Ç—å –ì–ú–∞
function unregisterGM(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ì–ú
    const isAdmin = msg.member.permissions.has(PermissionsBitField.Flags.Administrator);
    const isModerator = msg.channel.permissionsFor(msg.member).has(PermissionsBitField.Flags.ManageChannels);
    const isCurrentGM = isGM(channelId, msg.author.id);

    if (!isAdmin && !isModerator && !isCurrentGM) {
      return msg.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ì–ú –º–æ–≥—É—Ç —Å–Ω–∏–º–∞—Ç—å –ì–ú–∞.");
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–æ —Å–Ω—è—Ç—å
    const target = msg.mentions.users.first() || msg.author;
    const targetId = target.id;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ì–ú–∞—Ö
    const gmFile = path.join(INVENTORY_PATH, `${channelId}_gm.json`);
    let gmData = loadData(gmFile);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ì–ú –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
    const currentGMId = Object.keys(gmData)[0];
    if (!currentGMId) {
      return msg.reply("‚ùå –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –ì–ú–∞.");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–Ω–∏–º–∞—é—Ç —Ç–µ–∫—É—â–µ–≥–æ –ì–ú–∞
    if (targetId !== currentGMId) {
      return msg.reply("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –ì–ú–∞.");
    }

    // –°–Ω–∏–º–∞–µ–º –ì–ú–∞
    delete gmData[targetId];
    saveData(gmFile, gmData);
    return msg.reply(`‚úÖ –ò–≥—Ä–æ–∫ **${target.username}** –±–æ–ª—å—à–µ –Ω–µ –ì–ú.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ unregisterGM:", err);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–¥–ª—è –ì–ú–æ–≤)
function checkInventory(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ì–ú–æ–º
    if (!isGM(channelId, msg.author.id)) {
      return msg.reply("‚õî –¢–æ–ª—å–∫–æ –ì–ú –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.");
    }

    if (!msg.mentions.users.size) {
      return msg.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ `@`.");
    }

    const target = msg.mentions.users.first();
    const targetId = target.id;
    const inventoryFile = path.join(INVENTORY_PATH, `${channelId}_${targetId}.json`);
    const inventory = loadData(inventoryFile);

    if (Object.keys(inventory).length === 0) {
      return msg.reply("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.");
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const inventoryList = Object.entries(inventory)
      .map(([item, count]) => `- **${item}**: ${count} —à—Ç.`)
      .join("\n");

    return msg.reply(`üì¶ **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ ${target.username}:**\n${inventoryList}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ checkInventory:", err);
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º (–¥–ª—è –ì–ú–æ–≤)
function manageStore(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    if (!args.length) {
      return msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!store {–¥–µ–π—Å—Ç–≤–∏–µ}`");
    }

    const subCmd = args.shift().toLowerCase();
    if (subCmd === "delete") {
      return deleteItem(msg, args);
    } else if (subCmd === "add") {
      return addItem(msg, args);
    } else if (subCmd === "remove") {
      return removeItem(msg, args);
    } else if (subCmd === "reg") {
      return registerGM(msg, args);
    } else if (subCmd === "unreg") {
      return unregisterGM(msg, args);
    } else if (subCmd === "check") {
      return checkInventory(msg, args);
    } else {
      return msg.reply(
        "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!store delete`, `!store add`, `!store remove`, `!store reg`, `!store unreg`, `!store check`."
      );
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ manageStore:", err);
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º (–¥–ª—è –∏–≥—Ä–æ–∫–æ–≤)
function manageInventory(msg, args) {
  try {
    const channelId = msg.channel.isThread() ? msg.channel.parentId : msg.channel.id;
    if (!isInventoryEnabled(channelId)) {
      return msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (`!setinvsys`).");
    }

    if (!args.length) {
      return msg.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!inv {–¥–µ–π—Å—Ç–≤–∏–µ}`");
    }

    const subCmd = args.shift().toLowerCase();
    if (subCmd === "show") {
      return showInventory(msg);
    } else if (subCmd === "give") {
      return giveItem(msg, args);
    } else {
      return msg.reply("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!inv show`, `!inv give`.");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ manageInventory:", err);
  }
}

module.exports = {
  setInventorySystem,
  manageStore,
  manageInventory,
  isInventoryEnabled,
  saveSettings,
  loadData,
  saveData,
  showInventory,
  giveItem,
  addItem,
  removeItem,
  deleteItem,
  registerGM,
  unregisterGM,
  checkInventory,
};
