require("dotenv").config();
const { Client, GatewayIntentBits, EmbedBuilder, Partials, PermissionsBitField } = require("discord.js");
const inventory = require("./inventory");
const statusCommand = require('./status.js');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages,
  ],
  partials: [Partials.Channel],
});

client.once("ready", () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
  statusCommand.restoreTimers();
});

const games = new Map();

client.on("messageCreate", async (msg) => {
  try {
    if (msg.author.bot) return;

    if (msg.content.startsWith('!status')) {
      const args = msg.content.slice('!status'.length).trim().split(/ +/);
      return statusCommand.execute(msg, args);
    }

    const args = msg.content.trim().split(/\s+/);
    const cmd = args.shift().toLowerCase();

    if (cmd === "!help") {
      const helpEmbed = new EmbedBuilder()
        .setColor(0xe67e22)
        .setTitle(`–ü—Ä–∏–≤–µ—Ç, ${msg.author.username}! –≠—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏`)
        .setDescription("–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å RP –ø—Ä–æ—Ü–µ—Å—Å.\n–í–µ—Ä—Å–∏—è: **1.8.0**\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
        .addFields(
          { name: "!ping", value: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞" },
          { name: "!updates", value: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç changelog" },
          { name: "!say", value: "–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" },
          { name: "!roll", value: "–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ `!roll {—á–∏—Å–ª–æ}` –∏–ª–∏ `!roll 1d20 + 1d30`" },
          { name: "!atc", value: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–Ω–∞ `!atc` –≤—ã–¥–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç 1 –¥–æ 20, `!atc {—á–∏—Å–ª–æ}` ‚Äî –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞, `{—á–∏—Å–ª–æ}` ‚Äî –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥–∞, `{true}` ‚Äî —à–∞–Ω—Å —É–¥–∞—á–Ω–æ–π –∞—Ç–∞–∫–∏" },
          { name: "!mg", value: "–ú–∏–Ω–∏-–ò–≥—Ä–∞\n`!mg start`: –ù–∞—á–∞—Ç—å –ú–∏–Ω–∏-–∏–≥—Ä—É\n`!mg prog {—á–∏—Å–ª–æ}`: –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ `{—á–∏—Å–ª–æ}`\n`!mg decr`: –£–º–µ–Ω—å—à–∏—Ç—å\n`!mg stop` –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ú–∏–Ω–∏-–ò–≥—Ä—É" },
          { name: "!status", value: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏\n`!status ready` - –ì–æ—Ç–æ–≤ (—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 12—á)\n`!status notready` - –ù–µ –≥–æ—Ç–æ–≤\n`!status check` - –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã—Ö" },
          {
            name: "–°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è",
            value: "**!setinvsys** - –í–∫–ª/–≤—ã–∫–ª —Å–∏—Å—Ç–µ–º—É (–∞–¥–º–∏–Ω—ã)\n" +
              "**!store reg/unreg @user** - –ù–∞–∑–Ω–∞—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å GM\n" +
              "**!store add @user –ø—Ä–µ–¥–º–µ—Ç=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ** - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã\n" +
              "**!store remove @user –ø—Ä–µ–¥–º–µ—Ç=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ** - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã\n" +
              "**!store delete @user –ø—Ä–µ–¥–º–µ—Ç** - –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ\n" +
              "**!store check @user** - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n" +
              "**!inv show** - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n" +
              "**!inv give @user –ø—Ä–µ–¥–º–µ—Ç=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ** - –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"
          }
        );
      return msg.channel.send({ embeds: [helpEmbed] });
    }

    if (cmd === "!updates") {
      const updatesEmbed = new EmbedBuilder()
        .setColor(0xe67e22)
        .setTitle(`Change log`)
        .setDescription("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è 1.8.0")
        .addFields(
          { name: "1.4.0", value: "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è" },
          { name: "1.6.0", value: 
            "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n" +
            "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞ –ì–ú–æ–º\n" +
            "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
          },
          { name: "1.7.0", value: 
            "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤\n" +
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤\n" +
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏"
	   }
        );
      return msg.channel.send({ embeds: [updatesEmbed] });
    }

    if (cmd === "!ping") {
      return msg.reply(`üèì –ü–æ–Ω–≥! –ó–∞–¥–µ—Ä–∂–∫–∞: **${Date.now() - msg.createdTimestamp}ms**`);
    }

    if (cmd === "!roll") {
      if (args.length === 0) {
        return msg.reply("üé≤ –£–∫–∞–∂–∏ –±—Ä–æ—Å–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: `!roll 2d20 + 1d6` –∏–ª–∏ `!roll 20`.");
      }

      let total = 0;
      let results = [];
      let expression = args.join(" ").replace(/\s+/g, "");

      if (/^\d+$/.test(expression)) {
        const max = parseInt(expression);
        if (isNaN(max) || max <= 1 || max > 1000) {
          return msg.reply("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç 2 –¥–æ 1000).");
        }
        const roll = Math.floor(Math.random() * max) + 1;
        return msg.reply(`üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n **${roll}**`);
      }

      expression = expression.replace(/(\d+)d(\d+)/g, (match, num, sides) => {
        num = parseInt(num);
        sides = parseInt(sides);
        if (isNaN(num) || isNaN(sides) || num < 1 || sides < 2 || sides > 1000) {
          return match;
        }

        let rolls = [];
        for (let i = 0; i < num; i++) {
          rolls.push(Math.floor(Math.random() * sides) + 1);
        }

        results.push(`${num}d${sides}: [${rolls.join(", ")}]`);
        total += rolls.reduce((sum, val) => sum + val, 0);
        return rolls.reduce((sum, val) => sum + val, 0);
      });

      try {
        total = eval(expression);
      } catch (e) {
        return msg.reply("‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏. –ü—Ä–∏–º–µ—Ä: `!roll 2d6 + 1d20 - 3`");
      }

      return msg.reply(`üé≤ –ë—Ä–æ—Å–∫–∏:\n${results.join("\n")}\n**–ò—Ç–æ–≥–æ: ${total}**`);
    }

    if (cmd === "!atc") {
      const atcr = Math.floor(Math.random() * 20) + 1;
      const atcre = Math.floor(Math.random() * 20) + 1;

      const mod = parseInt(args[0]);
      const emod = parseInt(args[1]);
      const luckEnabled = args[2] === "true";

      const modr = isNaN(mod) || mod <= 1 ? 0 : Math.floor(Math.random() * mod) + 1;
      const emodr = isNaN(emod) || emod <= 1 ? 0 : Math.floor(Math.random() * emod) + 1;

      let result = `–í–∞—à–∞ –∞—Ç–∞–∫–∞: ${atcr}${modr ? ` + ${modr} = ${atcr + modr}` : ""}\n`;

      if (luckEnabled) {
        const luckRoll1 = Math.floor(Math.random() * 6) + 1;
        result += `üé≤ –£–¥–∞—á–∞: **${luckRoll1}**\n`;
      }

      result += `–ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞: ${atcre}${emodr ? ` + ${emodr} = ${atcre + emodr}` : ""}`;

      if (luckEnabled) {
        const luckRoll2 = Math.floor(Math.random() * 6) + 1;
        result += `\nüé≤ –£–¥–∞—á–∞: **${luckRoll2}**`;
      }

      return msg.reply(result);
    }

    if (cmd === "!say") {
      return msg.reply(args.join(" "));
    }

    if (cmd === "!mg") {
      let channelId = String(msg.channel.id);

      if (args[0] === "start") {
        if (games.has(channelId)) {
          return msg.reply("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!");
        }

        games.set(channelId, 0);
        return msg.reply("–ú–∏–Ω–∏-–∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%");
      }

      if (args[0] === "prog") {
        if (!games.has(channelId)) {
          return msg.reply("–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!mg start`.");
        }

        let maxIncrease = parseInt(args[1]);
        if (isNaN(maxIncrease) || maxIncrease <= 0) {
          return msg.reply("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ `!mg prog`.");
        }

        let progress = games.get(channelId);
        let randomIncrease = Math.floor(Math.random() * maxIncrease) + 1;
        progress += randomIncrease;

        if (progress >= 100) {
          games.delete(channelId);
          return msg.reply("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≥—Ä–µ—Å—Å: 100%");
        }

        games.set(channelId, progress);
        return msg.reply(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
      }

      if (args[0] === "decr") {
        if (!games.has(channelId)) {
          return msg.reply("–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!mg start`.");
        }

        let maxDecrease = parseInt(args[1]);
        if (isNaN(maxDecrease) || maxDecrease <= 0) {
          return msg.reply("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ `!mg decr`.");
        }

        let progress = games.get(channelId);
        let randomDecrease = Math.floor(Math.random() * maxDecrease) + 1;
        progress -= randomDecrease;

        if (progress < 0) progress = 0;

        games.set(channelId, progress);
        return msg.reply(`–ü—Ä–æ–≥—Ä–µ—Å—Å —É–º–µ–Ω—å—à–µ–Ω: ${progress}%`);
      }

      if (args[0] === "stop") {
        if (!games.has(channelId)) {
          return msg.reply("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, —á—Ç–æ–±—ã –µ—ë –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!");
        }

        games.delete(channelId);
        return msg.reply("–ú–∏–Ω–∏-–∏–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
      }
    }

    if (cmd === "!setinvsys") {
      if (!msg.member.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {
        return msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
      }

      const enabled = inventory.toggleSystem(msg.guild.id, msg.channel.id);
      return msg.reply(`‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è ${enabled ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–≤—ã–∫–ª—é—á–µ–Ω–∞"} –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.`);
    }

    if (!inventory.isSystemEnabled(msg.guild.id, msg.channel.id)) return;

    if (cmd === "!store") {
      const subCmd = args.shift().toLowerCase();

      if (subCmd === "reg") {
        if (!msg.member.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {
          return msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è GM.");
        }

        const target = msg.mentions.users.first() || msg.author;
        inventory.registerGM(msg.guild.id, msg.channel.id, target.id);
        return msg.reply(`‚úÖ <@${target.id}> —Ç–µ–ø–µ—Ä—å GM –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.`);
      }

      if (subCmd === "unreg") {
        if (!msg.member.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {
          return msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è GM.");
        }

        const target = msg.mentions.users.first() || msg.author;
        inventory.unregisterGM(msg.guild.id, msg.channel.id, target.id);
        return msg.reply(`‚úÖ <@${target.id}> –±–æ–ª—å—à–µ –Ω–µ GM –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.`);
      }

      if (!inventory.isGM(msg.guild.id, msg.channel.id, msg.author.id)) {
        return msg.reply("‚ùå –¢–æ–ª—å–∫–æ GM –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã store.");
      }

      if (subCmd === "add") {
        const targetUser = msg.mentions.users.first();
        if (!targetUser) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.");
        }

        const itemsArgs = args.filter(arg => !arg.startsWith('<@'));
        const items = inventory.parseItemsArgs(itemsArgs);

        if (Object.keys(items).length === 0) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø—Ä–µ–¥–º–µ—Ç=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
        }

        inventory.addItems(msg.guild.id, msg.channel.id, targetUser.id, items);
        return msg.reply(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å <@${targetUser.id}>.`);
      }

      if (subCmd === "remove") {
        const targetUser = msg.mentions.users.first();
        if (!targetUser) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.");
        }

        const itemsArgs = args.filter(arg => !arg.startsWith('<@'));
        const items = inventory.parseItemsArgs(itemsArgs);

        if (Object.keys(items).length === 0) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø—Ä–µ–¥–º–µ—Ç=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
        }

        inventory.removeItems(msg.guild.id, msg.channel.id, targetUser.id, items);
        return msg.reply(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è <@${targetUser.id}>.`);
      }

      if (subCmd === "delete") {
        const targetUser = msg.mentions.users.first();
        if (!targetUser) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.");
        }

        const itemsArgs = args.filter(arg => !arg.startsWith('<@'));
        const items = inventory.parseDeleteArgs(itemsArgs);

        if (items.length === 0) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.");
        }

        inventory.deleteItems(msg.guild.id, msg.channel.id, targetUser.id, items);
        return msg.reply(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è <@${targetUser.id}>.`);
      }

      if (subCmd === "check") {
        const targetUser = msg.mentions.users.first();
        if (!targetUser) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.");
        }

        const targetInventory = inventory.getInventory(msg.guild.id, msg.channel.id, targetUser.id);

        if (Object.keys(targetInventory).length === 0) {
          return msg.reply(`‚ÑπÔ∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å <@${targetUser.id}> –ø—É—Å—Ç.`);
        }

        const inventoryList = Object.entries(targetInventory)
          .map(([item, quantity]) => `‚Ä¢ ${item}: ${quantity}`)
          .join('\n');

        const embed = new EmbedBuilder()
          .setTitle(`–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å <@${targetUser.id}>`)
          .setDescription(inventoryList)
          .setColor('#0099ff');

        return msg.channel.send({ embeds: [embed] });
      }
    }

    if (cmd === "!inv") {
      const subCmd = args.shift().toLowerCase();

      if (subCmd === "show") {
        const userInventory = inventory.getInventory(msg.guild.id, msg.channel.id, msg.author.id);

        if (Object.keys(userInventory).length === 0) {
          return msg.reply("‚ÑπÔ∏è –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.");
        }

        const inventoryList = Object.entries(userInventory)
          .map(([item, quantity]) => `‚Ä¢ ${item}: ${quantity}`)
          .join('\n');

        const embed = new EmbedBuilder()
          .setTitle('–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
          .setDescription(inventoryList)
          .setColor('#0099ff');

        return msg.channel.send({ embeds: [embed] });
      }

      if (subCmd === "give") {
        const targetUser = msg.mentions.users.first();
        if (!targetUser) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.");
        }

        if (targetUser.id === msg.author.id) {
          return msg.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.");
        }

        const itemsArgs = args.filter(arg => !arg.startsWith('<@'));
        const items = inventory.parseItemsArgs(itemsArgs);

        if (Object.keys(items).length === 0) {
          return msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø—Ä–µ–¥–º–µ—Ç=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
        }

        try {
          inventory.transferItems(msg.guild.id, msg.channel.id, msg.author.id, targetUser.id, items);
          return msg.reply(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã <@${targetUser.id}>.`);
        } catch (error) {
          return msg.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }
});

client.login(process.env.TOKEN);
