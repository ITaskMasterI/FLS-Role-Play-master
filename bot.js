require("dotenv").config();
const { Client, GatewayIntentBits, EmbedBuilder, Partials } = require("discord.js");
const inventory = require("./inventory");
const statusCommand = require('./status.js');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages,
  ],
  partials: [Partials.Channel],
});

client.once("ready", () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
  statusCommand.restoreTimers(); // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
});

const games = new Map(); // –•—Ä–∞–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä –ø–æ –∫–∞–Ω–∞–ª–∞–º

client.on("messageCreate", async (msg) => {
  try {
    if (msg.author.bot) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤
    if (msg.content.startsWith('!status')) {
      const args = msg.content.slice('!status'.length).trim().split(/ +/);
      return statusCommand.execute(msg, args);
    }

    const args = msg.content.trim().split(/\s+/);
    const cmd = args.shift().toLowerCase();

    if (cmd === "!help") {
      const helpEmbed = new EmbedBuilder()
        .setColor(0xe67e22)
        .setTitle(`–ü—Ä–∏–≤–µ—Ç, ${msg.author.username}! –≠—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏`)
        .setDescription("–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å RP –ø—Ä–æ—Ü–µ—Å—Å.\n–í–µ—Ä—Å–∏—è: **1.6.0**\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
        .addFields(
          { name: "!ping", value: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞" },
          { name: "!updates", value: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç changelog" },
          { name: "!say", value: "–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" },
          { name: "!roll", value: "–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ `!roll {—á–∏—Å–ª–æ}` –∏–ª–∏ `!roll 1d20 + 1d30`" },
          { name: "!atc", value: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–Ω–∞ `!atc` –≤—ã–¥–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç 1 –¥–æ 20, `!atc {—á–∏—Å–ª–æ}` ‚Äî –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞, `{—á–∏—Å–ª–æ}` ‚Äî –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥–∞, `{true}` ‚Äî —à–∞–Ω—Å —É–¥–∞—á–Ω–æ–π –∞—Ç–∞–∫–∏" },
          { name: "!mg", value: "–ú–∏–Ω–∏-–ò–≥—Ä–∞\n`!mg start`: –ù–∞—á–∞—Ç—å –ú–∏–Ω–∏-–∏–≥—Ä—É\n`!mg prog {—á–∏—Å–ª–æ}`: –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ `{—á–∏—Å–ª–æ}`\n`!mg decr`: –£–º–µ–Ω—å—à–∏—Ç—å\n`!mg stop` –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ú–∏–Ω–∏-–ò–≥—Ä—É" },
          { name: "!status", value: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏\n`!status ready` - –ì–æ—Ç–æ–≤ (—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 12—á)\n`!status notready` - –ù–µ –≥–æ—Ç–æ–≤\n`!status check` - –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã—Ö" },
          {
            name: "!setinvsys",
            value: "**!setinvsys** ‚Äì –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –∫–∞–Ω–∞–ª–µ. " +
              "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–∞."
          }
        );
      return msg.channel.send({ embeds: [helpEmbed] });
    }
if (cmd === "!updates") {
  const updatesEmbed = new EmbedBuilder()
    .setColor(0xe67e22)
    .setTitle(`Change log`)
    .setDescription("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è 1.7.0")
    .addFields(
      { name: "1.4.0", value: "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è" },
      { name: "1.6.0", value: 
        "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n" +
        "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞ –ì–ú–æ–º\n" +
        "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n" +
        "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !updates"
      },
      { name: "1.7.0", value: 
        "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤\n" +
        "–ö–æ–º–∞–Ω–¥–∞ !status –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏\n" +
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤\n" +
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞"
      }
    );
  return msg.channel.send({ embeds: [updatesEmbed] });
}

    if (cmd === "!ping") {
      return msg.reply(`üèì –ü–æ–Ω–≥! –ó–∞–¥–µ—Ä–∂–∫–∞: **${Date.now() - msg.createdTimestamp}ms**`);
    }

    if (cmd === "!roll") {
      if (args.length === 0) {
        return msg.reply("üé≤ –£–∫–∞–∂–∏ –±—Ä–æ—Å–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: `!roll 2d20 + 1d6` –∏–ª–∏ `!roll 20`.");
      }

      let total = 0;
      let results = [];
      let expression = args.join(" ").replace(/\s+/g, "");

      if (/^\d+$/.test(expression)) {
        const max = parseInt(expression);
        if (isNaN(max) || max <= 1 || max > 1000) {
          return msg.reply("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç 2 –¥–æ 1000).");
        }
        const roll = Math.floor(Math.random() * max) + 1;
        return msg.reply(`üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n **${roll}**`);
      }

      expression = expression.replace(/(\d+)d(\d+)/g, (match, num, sides) => {
        num = parseInt(num);
        sides = parseInt(sides);
        if (isNaN(num) || isNaN(sides) || num < 1 || sides < 2 || sides > 1000) {
          return match;
        }

        let rolls = [];
        for (let i = 0; i < num; i++) {
          rolls.push(Math.floor(Math.random() * sides) + 1);
        }

        results.push(`${num}d${sides}: [${rolls.join(", ")}]`);
        total += rolls.reduce((sum, val) => sum + val, 0);
        return rolls.reduce((sum, val) => sum + val, 0);
      });

      try {
        total = eval(expression);
      } catch (e) {
        return msg.reply("‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏. –ü—Ä–∏–º–µ—Ä: `!roll 2d6 + 1d20 - 3`");
      }

      return msg.reply(`üé≤ –ë—Ä–æ—Å–∫–∏:\n${results.join("\n")}\n**–ò—Ç–æ–≥–æ: ${total}**`);
    }

    if (cmd === "!atc") {
      const atcr = Math.floor(Math.random() * 20) + 1;
      const atcre = Math.floor(Math.random() * 20) + 1;

      const mod = parseInt(args[0]);
      const emod = parseInt(args[1]);
      const luckEnabled = args[2] === "true";

      const modr = isNaN(mod) || mod <= 1 ? 0 : Math.floor(Math.random() * mod) + 1;
      const emodr = isNaN(emod) || emod <= 1 ? 0 : Math.floor(Math.random() * emod) + 1;

      let result = `–í–∞—à–∞ –∞—Ç–∞–∫–∞: ${atcr}${modr ? ` + ${modr} = ${atcr + modr}` : ""}\n`;

      if (luckEnabled) {
        const luckRoll1 = Math.floor(Math.random() * 6) + 1;
        result += `üé≤ –£–¥–∞—á–∞: **${luckRoll1}**\n`;
      }

      result += `–ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞: ${atcre}${emodr ? ` + ${emodr} = ${atcre + emodr}` : ""}`;

      if (luckEnabled) {
        const luckRoll2 = Math.floor(Math.random() * 6) + 1;
        result += `\nüé≤ –£–¥–∞—á–∞: **${luckRoll2}**`;
      }

      return msg.reply(result);
    }

    if (cmd === "!say") {
      return msg.reply(args.join(" "));
    }

    if (cmd === "!mg") {
      let channelId = String(msg.channel.id);

      if (args[0] === "start") {
        if (games.has(channelId)) {
          return msg.reply("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!");
        }

        games.set(channelId, 0);
        return msg.reply("–ú–∏–Ω–∏-–∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%");
      }

      if (args[0] === "prog") {
        if (!games.has(channelId)) {
          return msg.reply("–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!mg start`.");
        }

        let maxIncrease = parseInt(args[1]);
        if (isNaN(maxIncrease) || maxIncrease <= 0) {
          return msg.reply("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ `!mg prog`.");
        }

        let progress = games.get(channelId);
        let randomIncrease = Math.floor(Math.random() * maxIncrease) + 1;
        progress += randomIncrease;

        if (progress >= 100) {
          games.delete(channelId);
          return msg.reply("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≥—Ä–µ—Å—Å: 100%");
        }

        games.set(channelId, progress);
        return msg.reply(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
      }

      if (args[0] === "decr") {
        if (!games.has(channelId)) {
          return msg.reply("–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!mg start`.");
        }

        let maxDecrease = parseInt(args[1]);
        if (isNaN(maxDecrease) || maxDecrease <= 0) {
          return msg.reply("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ `!mg decr`.");
        }

        let progress = games.get(channelId);
        let randomDecrease = Math.floor(Math.random() * maxDecrease) + 1;
        progress -= randomDecrease;

        if (progress < 0) progress = 0;

        games.set(channelId, progress);
        return msg.reply(`–ü—Ä–æ–≥—Ä–µ—Å—Å —É–º–µ–Ω—å—à–µ–Ω: ${progress}%`);
      }

      if (args[0] === "stop") {
        if (!games.has(channelId)) {
          return msg.reply("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, —á—Ç–æ–±—ã –µ—ë –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!");
        }

        games.delete(channelId);
        return msg.reply("–ú–∏–Ω–∏-–∏–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
      }
    }

    if (cmd === "!inv") {
      const subCmd = args.shift().toLowerCase();
      if (subCmd === "show") {
        await inventory.showInventory(msg);
      } else if (subCmd === "give") {
        await inventory.giveItem(msg, args);
      } else {
        msg.reply("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!inv show`, `!inv give`.");
      }
    }

    if (cmd === "!store") {
      const subCmd = args.shift().toLowerCase();
      if (subCmd === "add") {
        await inventory.addItem(msg, args);
      } else if (subCmd === "remove") {
        await inventory.removeItem(msg, args);
      } else if (subCmd === "delete") {
        await inventory.deleteItem(msg, args);
      } else if (subCmd === "reg") {
        await inventory.registerGM(msg, args);
      } else if (subCmd === "unreg") {
        await inventory.unregisterGM(msg, args);
      } else if (subCmd === "check") {
        await inventory.checkInventory(msg, args);
      } else {
        msg.reply("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!store add`, `!store remove`, `!store delete`, `!store reg`, `!store unreg`, `!store check`.");
      }
    }

    if (cmd === "!setinvsys") {
      await inventory.setInventorySystem(msg);
    }

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }
});

client.login(process.env.TOKEN);

